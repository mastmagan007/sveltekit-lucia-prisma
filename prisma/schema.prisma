// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Property {
  id                     Int       @id @default(autoincrement())
  listing_id             String
  city                   String
  state                  String
  title                  String?
  addRooms               String?
  area                   Int?
  area_units             String?
  listPrice              Int?
  type                   String?
  remarks                String?
  yearBuilt              Int?
  totalRooms             String?
  amenities              String[]
  utilities              String[]
  securityFeatures       String[]
  modification_timestamp DateTime?
  Media                  String[]
}

// model Media {
//   id                         Int      @id @default(autoincrement())
//   myMediaURL                 String
//   MediaKey                   String
//   Order                      Int
//   LongDescription            String
//   MediaType                  String
//   ImageWidth                 Int
//   ImageHeight                Int
//   ImageSizeDescription       String
//   MediaModificationTimestamp DateTime
//   property                   Property @relation(fields: [propertyId], references: [id])
//   propertyId                 Int
// }

model Article {
  id       Int     @id @default(autoincrement())
  title    String
  content  String
  imageUrl String?
  User     User    @relation(fields: [userId], references: [id])
  userId   String
}

model User {
  id       String    @id @unique
  name     String
  username String    @unique
  articles Article[]
  session  Session[]
  Key      Key[]

  @@map("user")
}

model Session {
  id             String @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  user           User   @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("session")
}

model Key {
  id              String  @id @unique
  hashed_password String?
  user_id         String
  primary         Boolean
  user            User    @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("key")
}
